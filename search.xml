<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>git常用命令</title>
      <link href="/2017/12/26/git/"/>
      <url>/2017/12/26/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用指令详解"><a href="#Git常用指令详解" class="headerlink" title="Git常用指令详解"></a>Git常用指令详解</h1><p>​    Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 </p><blockquote><p>版本库</p></blockquote><p>​    创建一个版本库 ： git init</p><p>这样，一个空的版本库就创建好了，并在当前目录中创建一个叫 .git 的子目录。 </p><blockquote><p>增加内容</p></blockquote><p>​    git add <file> # 将工作文件修改提交到本地暂存区 </file></p><p>​    git add . # 将所有修改过的工作文件提交暂存区 </p><blockquote><p>提交内容</p></blockquote><p>​    提交已经被add进来的改动.</p><p>​    git commit -m “代码提交描述信息”</p><pre><code>  git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下. git commit --amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消.</code></pre><blockquote><p>管理分支</p></blockquote><p>​    管理分支：git branch </p><p>​    查看本地分支：git branch</p><p>​    查看远程分支：git branch -r</p><p>​    创建本地分支：git branch [name] —-注意新分支创建后不会自动切换为当前分支</p><p>​    切换分支：git checkout [name]</p><p>​    创建新分支并立即切换到新分支：git checkout -b [name]</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo发布文章-操作命令</title>
      <link href="/2017/10/11/hexoPage/"/>
      <url>/2017/10/11/hexoPage/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo发布文章-操作命令"><a href="#Hexo发布文章-操作命令" class="headerlink" title="Hexo发布文章-操作命令"></a>Hexo发布文章-操作命令</h1><p>​    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 </p><blockquote><p><strong>init</strong></p></blockquote><pre><code>hexo init [folder]</code></pre><p>​    新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。 </p><blockquote><p><strong>new</strong></p></blockquote><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>​    新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。 </p><blockquote><p><strong>generate</strong></p></blockquote><pre><code>hexo generate</code></pre><p>​    生成静态文件。 该命令可以简写为 </p><pre><code>hexo g</code></pre><blockquote><p><strong>publish</strong></p></blockquote><pre><code>$ hexo publish [layout] &lt;filename&gt;</code></pre><p>​    发表草稿。 </p><blockquote><p><strong>server</strong></p></blockquote><pre><code>$ hexo server</code></pre><p>​    启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。 </p><blockquote><p><strong>deploy</strong></p></blockquote><pre><code>$ hexo deploy</code></pre><p>​    部署网站。 </p><hr><p>​    所以，发布新文章具体顺序为：</p><pre><code>hexo ghexo shexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>更换主题后，新建page文件时报错</title>
      <link href="/2017/05/11/a/"/>
      <url>/2017/05/11/a/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo更换主题需注意事项"><a href="#Hexo更换主题需注意事项" class="headerlink" title="Hexo更换主题需注意事项"></a>Hexo更换主题需注意事项</h1><h2 id="首先，如何下载新的hexo主题"><a href="#首先，如何下载新的hexo主题" class="headerlink" title="首先，如何下载新的hexo主题"></a>首先，如何下载新的hexo主题</h2><p>进入到 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo</a> 官网中，选择Themes，下面有很多样式的主题，可以根据自己喜欢的进行选择</p><p>找到具体主题后，复制相应的主题名称，进入到gitHub中进行搜索， 会出现相应的代码，用git把</p><p>代码down下来即可。</p><p>直接将文件夹放入到Hexo的themes下，切记不要修改文件名，好，废话不多说，部署整个过程中遇到的问题。</p><h3 id="问题：1-在github中项目的出现404或者样式展示不全问题"><a href="#问题：1-在github中项目的出现404或者样式展示不全问题" class="headerlink" title="问题：1.在github中项目的出现404或者样式展示不全问题"></a>问题：1.在github中项目的出现404或者样式展示不全问题</h3><p>原因：这个一般问题都是路径问题，有可能是配置文件中url和root写错了，或者是github配置问题</p><p><img src="C:\Users\LCY\AppData\Local\Temp\1542877469239.png" alt="1542877469239"></p><p><img src="C:\Users\LCY\AppData\Local\Temp\1542877516185.png" alt="1542877516185"></p><p>在github中的项目name最好和总工程的名字是一样的，要不然路径总是有莫名其妙的问题，统一修改成一样的，Hexo配置文件按图修改，大部分问题可解决。</p><h3 id="问题：2-生成新文章时报错"><a href="#问题：2-生成新文章时报错" class="headerlink" title="问题：2.生成新文章时报错"></a>问题：2.生成新文章时报错</h3><p><img src="C:\Users\LCY\AppData\Local\Temp\1542877732998.png" alt="1542877732998"></p><p>也就是这个报错 ：</p><pre><code>TypeError: Cannot read property &#39;utcOffset&#39; of null</code></pre><p>导致原因是新导入的主题配置文件中的timezone 与 hexo主配置不匹配，导致这类报错。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue使用时，对vuex的理解</title>
      <link href="/2017/04/15/vuex/"/>
      <url>/2017/04/15/vuex/</url>
      
        <content type="html"><![CDATA[<h1 id="vuex-与-sessionStorage-进行区分"><a href="#vuex-与-sessionStorage-进行区分" class="headerlink" title="vuex 与 sessionStorage 进行区分"></a>vuex 与 sessionStorage 进行区分</h1><h2 id="首先，理解vuex的作用"><a href="#首先，理解vuex的作用" class="headerlink" title="首先，理解vuex的作用"></a>首先，理解vuex的作用</h2><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的<strong>状态 (state)</strong>。 </p><p>Vuex 和单纯的全局对象有以下两点不同： </p><ol><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。 </li><li><p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p><p>通过对上面的理解，至少可以区分vuex与全局对象的区别，正如此，全局对象一般存储在session中，所以这就是vuex与session的区别。</p></li></ol><p>注：官方文档进行查看 <a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="noopener">vuex</a> </p><h2 id="通过存储方式及类型区别"><a href="#通过存储方式及类型区别" class="headerlink" title="通过存储方式及类型区别"></a>通过存储方式及类型区别</h2><ol><li>存储位置 ： vuex存储在内存，而session则以文件的方式存储在本地；</li><li>应用场景 ： vuex用于组件间的传值，而session则用于页面间的传值；</li><li>时效性 ： vuex存储的值刷新时会丢失，而localstorage不会清除，除非手动删除；</li></ol><p>还可以换种说法：</p><p>当 vuex 与 storage 关联的数据不变时，两者是等同的；但当是其中一个组件改变该数据时，同时另一个组件用到此数据，vuex是可以实现的，但storage是不可以的。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
